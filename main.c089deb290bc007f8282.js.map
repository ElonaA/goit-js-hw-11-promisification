{"version":3,"sources":["webpack:///./js/task-01.js","webpack:///./js/task-02.js","webpack:///./js/task-03.js"],"names":["delay","ms","Promise","resolve","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","updatedUsers","map","user","table","makeTransaction","transaction","reject","min","max","Math","floor","random","id","logSuccess","logError","warn","amount","catch"],"mappings":"0HAAMA,EAAQ,SAAAC,GACZ,OAAO,IAAIC,SAAQ,SAAAC,GACjBC,WAAWD,EAAQF,GAAKA,OAItBI,EAAS,SAAAC,GAAI,OAAIC,QAAQC,IAAR,kBAA8BF,EAA9B,UAGvBN,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ,G,kCCXXK,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,SAACC,EAAUC,GACjC,IAAMC,EAAeF,EAASG,KAAI,SAAAC,GAAI,OACpCA,EAAKP,OAASI,EAAd,iBAA8BG,EAA9B,CAAoCN,QAASM,EAAKN,SAAWM,KAG/D,OAAO,IAAIhB,SAAQ,SAAAC,GAAO,OAAIA,EAAQa,OAGlCX,EAAS,SAAAW,GAAY,OAAIT,QAAQY,MAAMH,IAG7CH,EAAgBH,EAAO,SAASD,KAAKJ,GACrCQ,EAAgBH,EAAO,OAAOD,KAAKJ,GCnBnC,IAIMe,EAAkB,SAACC,GACrB,OAAO,IAAInB,SAAQ,SAACC,EAASmB,GACzB,IAN2BC,EAAKC,EAM1BxB,GANqBuB,EAMa,IANRC,EAMa,IAL5CC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAO9CnB,YAAW,WACYqB,KAAKE,SAAW,GAG/BxB,EAAQ,CAAEyB,GAAIP,EAAYO,GAAItB,KAAMN,IAEpCsB,EAAOD,EAAYO,MAExB5B,OAIL6B,EAAa,SAAC,GAAiB,IAAfD,EAAe,EAAfA,GAAItB,EAAW,EAAXA,KACxBC,QAAQC,IAAR,iBAA6BoB,EAA7B,iBAAgDtB,EAAhD,SAGIwB,EAAW,SAAAF,GACfrB,QAAQwB,KAAR,kCAA+CH,EAA/C,8BAMFR,EAAgB,CAAEQ,GAAI,GAAII,OAAQ,MAC/BvB,KAAKoB,GACLI,MAAMH,GAETV,EAAgB,CAAEQ,GAAI,GAAII,OAAQ,MAC/BvB,KAAKoB,GACLI,MAAMH,GAETV,EAAgB,CAAEQ,GAAI,GAAII,OAAQ,KAC/BvB,KAAKoB,GACLI,MAAMH,GAETV,EAAgB,CAAEQ,GAAI,GAAII,OAAQ,MAC/BvB,KAAKoB,GACHI,MAAMH,K","file":"main.c089deb290bc007f8282.js","sourcesContent":["const delay = ms => {\r\n  return new Promise(resolve => {\r\n    setTimeout(resolve(ms), ms);\r\n  });\r\n}\r\n\r\nconst logger = time => console.log(`Resolved after ${time}ms üöÄ`);\r\n\r\n// –í—ã–∑–æ–≤—ã —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏\r\ndelay(2000).then(logger); // Resolved after 2000ms\r\ndelay(1000).then(logger); // Resolved after 1000ms\r\ndelay(1500).then(logger); // Resolved after 1500ms\r\n","const users = [\r\n  { name: 'Mango', active: true },\r\n  { name: 'Poly', active: false },\r\n  { name: 'Ajax', active: true },\r\n  { name: 'Lux', active: false },\r\n];\r\n\r\nconst toggleUserState = (allUsers, userName) => {\r\n  const updatedUsers = allUsers.map(user =>\r\n    user.name === userName ? { ...user, active: !user.active } : user,\r\n  );\r\n\r\n  return new Promise(resolve => resolve(updatedUsers)); \r\n};\r\n\r\nconst logger = updatedUsers => console.table(updatedUsers);\r\n\r\n\r\ntoggleUserState(users, 'Mango').then(logger);\r\ntoggleUserState(users, 'Lux').then(logger);\r\n","const randomIntegerFromInterval = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\nconst makeTransaction = (transaction) => {\r\n    return new Promise((resolve, reject) => {\r\n        const delay = randomIntegerFromInterval(200, 500);\r\n\r\n        setTimeout(() => {\r\n            const canProcess = Math.random() > 0.3;\r\n\r\n            if (canProcess) {\r\n                resolve({ id: transaction.id, time: delay });\r\n            } else {\r\n                reject(transaction.id);\r\n            }\r\n        }, delay);\r\n    });\r\n};\r\n\r\nconst logSuccess = ({ id, time }) => {\r\n  console.log(`‚úÖ Transaction ${id} processed in ${time}ms ‚åõ`);\r\n};\r\n\r\nconst logError = id => {\r\n  console.warn(`‚ùå Error processing transaction ${id}. Please try again later.`);\r\n};\r\n\r\n/*\r\n * –î–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–∞–∫\r\n */\r\nmakeTransaction({ id: 70, amount: 150 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 71, amount: 230 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 72, amount: 75 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 73, amount: 100 })\r\n  .then(logSuccess)\r\n    .catch(logError);\r\n"],"sourceRoot":""}